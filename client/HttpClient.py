# coding=utf-8import requestsimport datetimeclass HttpClient(object):    """    8。刚刚那里是屏蔽了警告，没把握的话不要屏蔽    9。从本地恢复代码    """    def build_url(self, host, uri):        return ''.join([host, uri])    def dopost(self, host, uri, data, headers):        return requests.post(self.build_url(host, uri), data, headers).text    def doget(self, host, uri, data, headers):        return requests.get(self.build_url(host, uri), data=data, headers=headers).text    def dodelete(self, host, uri, data):        return requests.delete(self.build_url(host, uri), data)    def doput(self):        pass    def run_main(self, method, host, uri, data, headers):        # 这个其实只是一个测试代码，所以它不是对外提供的完成某一功能的方法，所以是私有的，避免引入此类的 python file 误执行        # 这样写才健壮，必要的时候加上异常处理        if method is None or host is None or uri is None or headers is None:            return None        val = None        if method == 'post':            val = self.dopost(host, uri, data, headers)        elif method == 'get':            val = self.doget(host, uri, data, headers)        elif method == 'delete':            val = self.dodelete(host, uri, data)        elif method == 'put':            print 'TODO: When method is put'        else:            print("错误")  # TODO: 这样输出出来的错误，你看到日志估计一脸懵逼，完全不知道哪里错了，输出错误也是白输出        return valif __name__ == "__main__":    # 在上面所有接口中除特殊情况应该返回相同数据结构 要么全是json 要么全不是    # 以后测试代码这样写    # 学习一下 py 中 private public protected，该什么时候使用这三种访问限定符    client = HttpClient()    now_time = datetime.datetime.now()    headers_target = {        "reqtme": datetime.datetime.strftime(now_time, '%Y-%m-%d %H:%M:%S'),        "Content-Type": "application/json;charset=UTF-8"    }    postMethod = 'post'    host_target = 'http://47.96.183.143'    loginUri = '/api/ums/login/signin'    loginData = {        "account": "ces001",        "password": "123456"    }    getMethod = 'get'    logoutUri = '/api/ums/login/signout/'    logotData = {'id': 2}    url_target = client.build_url(host_target, loginUri)    loginResult = client.dopost(host_target, loginUri, loginData, headers_target)    logoutResult = client.doget(host_target, logoutUri, logotData, headers_target)    result = client.run_main(postMethod, host_target, loginUri, loginData, headers_target)    print(loginResult)    print(logoutResult)